// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'mirror.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are not used by any `pub` functions: `POOL`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `deref`, `from`, `initialize`

Future<List<(String, MusicList)>> searchMusicList(
        {required String content, required int page, required String source}) =>
    RustLib.instance.api.crateApiMusicSdkSearchMusicList(
        content: content, page: page, source: source);

Future<List<MusicW>> getMusicsFromMusicList(
        {required String payload, required int page, required String source}) =>
    RustLib.instance.api.crateApiMusicSdkGetMusicsFromMusicList(
        payload: payload, page: page, source: source);

Future<(MusicList, List<MusicW>)> searchAlbum(
        {required MusicW music, required int page}) =>
    RustLib.instance.api.crateApiMusicSdkSearchAlbum(music: music, page: page);

Future<List<MusicW>> searchMusic(
        {required String content, required int page, required String source}) =>
    RustLib.instance.api.crateApiMusicSdkSearchMusic(
        content: content, page: page, source: source);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MusicW>>
abstract class MusicW implements RustOpaqueInterface {
  String getExtraInto({required Quality quality});

  PlatformInt64 getMusicId();

  MusicInfo getMusicInfo();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Pool < Any >>>
abstract class PoolAny implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SqlMusicFactoryW>>
abstract class SqlMusicFactoryW implements RustOpaqueInterface {
  static Future<SqlMusicFactoryW> build({required PoolAny pool}) =>
      RustLib.instance.api.crateApiMusicSdkSqlMusicFactoryWBuild(pool: pool);

  Future<void> changeMusicData(
      {required List<MusicW> musics, required List<MusicInfo> infos});

  Future<void> changeMusicDefaultSource(
      {required MusicList musicList,
      required Int64List ids,
      required List<String> defaultSources});

  Future<void> changeMusicListMetadata(
      {required List<MusicList> oldList, required List<MusicList> newList});

  Future<void> cleanUnusedMusicData();

  Future<void> createMusicListTable({required List<MusicList> musicLists});

  Future<void> delMusic({required MusicList musicList, required Int64List ids});

  Future<void> delMusicListTable({required List<MusicList> musicLists});

  Future<void> initCreateTable();

  Future<void> insertMusic(
      {required MusicList musicList, required List<MusicW> musics});

  Future<List<MusicW>> readMusic({required MusicList musicList});

  Future<List<MusicW>> readMusicData({required String source});

  Future<List<MusicList>> readMusicLists();

  Future<void> reorderMusic(
      {required MusicList musicList,
      required Int64List newIndex,
      required List<MusicW> oldMusicsInOrder});
}
