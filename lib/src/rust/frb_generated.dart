// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/cache.dart';
import 'api/config.dart';
import 'api/init.dart';
import 'api/mirror.dart';
import 'api/music_sdk.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.32';

  @override
  int get rustContentHash => 1772521883;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_app_rhyme',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<String> cacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint});

  Future<void> deleteCacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint});

  Future<String> genHash({required String str, dynamic hint});

  Future<String?> useCacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint});

  Future<Config> configLoad({dynamic hint});

  Future<void> configSave({required Config that, dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<(SqlMusicFactoryW, Config)> initStore(
      {required String storeRoot, dynamic hint});

  String musicWGetExtraInto(
      {required MusicW that, required Quality quality, dynamic hint});

  int musicWGetMusicId({required MusicW that, dynamic hint});

  MusicInfo musicWGetMusicInfo({required MusicW that, dynamic hint});

  Future<SqlMusicFactoryW> sqlMusicFactoryWBuild(
      {required PoolAny pool, dynamic hint});

  Future<void> sqlMusicFactoryWChangeMusicData(
      {required SqlMusicFactoryW that,
      required List<MusicW> musics,
      required List<MusicInfo> infos,
      dynamic hint});

  Future<void> sqlMusicFactoryWChangeMusicDefaultSource(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List ids,
      required List<String> defaultSources,
      dynamic hint});

  Future<void> sqlMusicFactoryWChangeMusicListMetadata(
      {required SqlMusicFactoryW that,
      required List<MusicList> oldList,
      required List<MusicList> newList,
      dynamic hint});

  Future<void> sqlMusicFactoryWCleanUnusedMusicData(
      {required SqlMusicFactoryW that, dynamic hint});

  Future<void> sqlMusicFactoryWCreateMusicListTable(
      {required SqlMusicFactoryW that,
      required List<MusicList> musicLists,
      dynamic hint});

  Future<void> sqlMusicFactoryWDelMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List ids,
      dynamic hint});

  Future<void> sqlMusicFactoryWDelMusicListTable(
      {required SqlMusicFactoryW that,
      required List<MusicList> musicLists,
      dynamic hint});

  Future<void> sqlMusicFactoryWInitCreateTable(
      {required SqlMusicFactoryW that, dynamic hint});

  Future<void> sqlMusicFactoryWInsertMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required List<MusicW> musics,
      dynamic hint});

  Future<List<MusicW>> sqlMusicFactoryWReadMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      dynamic hint});

  Future<List<MusicW>> sqlMusicFactoryWReadMusicData(
      {required SqlMusicFactoryW that, required String source, dynamic hint});

  Future<List<MusicList>> sqlMusicFactoryWReadMusicLists(
      {required SqlMusicFactoryW that, dynamic hint});

  Future<void> sqlMusicFactoryWReorderMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List newIndex,
      required List<MusicW> oldMusicsInOrder,
      dynamic hint});

  Future<List<MusicW>> searchMusic(
      {required String content,
      required int page,
      required String source,
      dynamic hint});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_MusicW;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_MusicW;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MusicWPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PoolAny;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PoolAny;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PoolAnyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SqlMusicFactoryW;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SqlMusicFactoryW;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SqlMusicFactoryWPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> cacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_String(cachePath, serializer);
        sse_encode_opt_String(filename, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCacheFileConstMeta,
      argValues: [file, cachePath, filename],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCacheFileConstMeta => const TaskConstMeta(
        debugName: "cache_file",
        argNames: ["file", "cachePath", "filename"],
      );

  @override
  Future<void> deleteCacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_String(cachePath, serializer);
        sse_encode_opt_String(filename, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kDeleteCacheFileConstMeta,
      argValues: [file, cachePath, filename],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDeleteCacheFileConstMeta => const TaskConstMeta(
        debugName: "delete_cache_file",
        argNames: ["file", "cachePath", "filename"],
      );

  @override
  Future<String> genHash({required String str, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(str, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGenHashConstMeta,
      argValues: [str],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGenHashConstMeta => const TaskConstMeta(
        debugName: "gen_hash",
        argNames: ["str"],
      );

  @override
  Future<String?> useCacheFile(
      {required String file,
      required String cachePath,
      String? filename,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_String(cachePath, serializer);
        sse_encode_opt_String(filename, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kUseCacheFileConstMeta,
      argValues: [file, cachePath, filename],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseCacheFileConstMeta => const TaskConstMeta(
        debugName: "use_cache_file",
        argNames: ["file", "cachePath", "filename"],
      );

  @override
  Future<Config> configLoad({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_config,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kConfigLoadConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConfigLoadConstMeta => const TaskConstMeta(
        debugName: "config_load",
        argNames: [],
      );

  @override
  Future<void> configSave({required Config that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_config(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kConfigSaveConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConfigSaveConstMeta => const TaskConstMeta(
        debugName: "config_save",
        argNames: ["that"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<(SqlMusicFactoryW, Config)> initStore(
      {required String storeRoot, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(storeRoot, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_sql_music_factory_w_config,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kInitStoreConstMeta,
      argValues: [storeRoot],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitStoreConstMeta => const TaskConstMeta(
        debugName: "init_store",
        argNames: ["storeRoot"],
      );

  @override
  String musicWGetExtraInto(
      {required MusicW that, required Quality quality, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            that, serializer);
        sse_encode_box_autoadd_quality(quality, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kMusicWGetExtraIntoConstMeta,
      argValues: [that, quality],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMusicWGetExtraIntoConstMeta => const TaskConstMeta(
        debugName: "MusicW_get_extra_into",
        argNames: ["that", "quality"],
      );

  @override
  int musicWGetMusicId({required MusicW that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kMusicWGetMusicIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMusicWGetMusicIdConstMeta => const TaskConstMeta(
        debugName: "MusicW_get_music_id",
        argNames: ["that"],
      );

  @override
  MusicInfo musicWGetMusicInfo({required MusicW that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_music_info,
        decodeErrorData: null,
      ),
      constMeta: kMusicWGetMusicInfoConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMusicWGetMusicInfoConstMeta => const TaskConstMeta(
        debugName: "MusicW_get_music_info",
        argNames: ["that"],
      );

  @override
  Future<SqlMusicFactoryW> sqlMusicFactoryWBuild(
      {required PoolAny pool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
            pool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW,
        decodeErrorData: null,
      ),
      constMeta: kSqlMusicFactoryWBuildConstMeta,
      argValues: [pool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWBuildConstMeta => const TaskConstMeta(
        debugName: "SqlMusicFactoryW_build",
        argNames: ["pool"],
      );

  @override
  Future<void> sqlMusicFactoryWChangeMusicData(
      {required SqlMusicFactoryW that,
      required List<MusicW> musics,
      required List<MusicInfo> infos,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            musics, serializer);
        sse_encode_list_music_info(infos, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWChangeMusicDataConstMeta,
      argValues: [that, musics, infos],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWChangeMusicDataConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_change_music_data",
        argNames: ["that", "musics", "infos"],
      );

  @override
  Future<void> sqlMusicFactoryWChangeMusicDefaultSource(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List ids,
      required List<String> defaultSources,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_box_autoadd_music_list(musicList, serializer);
        sse_encode_list_prim_i_64_strict(ids, serializer);
        sse_encode_list_String(defaultSources, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWChangeMusicDefaultSourceConstMeta,
      argValues: [that, musicList, ids, defaultSources],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWChangeMusicDefaultSourceConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_change_music_default_source",
        argNames: ["that", "musicList", "ids", "defaultSources"],
      );

  @override
  Future<void> sqlMusicFactoryWChangeMusicListMetadata(
      {required SqlMusicFactoryW that,
      required List<MusicList> oldList,
      required List<MusicList> newList,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_list_music_list(oldList, serializer);
        sse_encode_list_music_list(newList, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWChangeMusicListMetadataConstMeta,
      argValues: [that, oldList, newList],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWChangeMusicListMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_change_music_list_metadata",
        argNames: ["that", "oldList", "newList"],
      );

  @override
  Future<void> sqlMusicFactoryWCleanUnusedMusicData(
      {required SqlMusicFactoryW that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWCleanUnusedMusicDataConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWCleanUnusedMusicDataConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_clean_unused_music_data",
        argNames: ["that"],
      );

  @override
  Future<void> sqlMusicFactoryWCreateMusicListTable(
      {required SqlMusicFactoryW that,
      required List<MusicList> musicLists,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_list_music_list(musicLists, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWCreateMusicListTableConstMeta,
      argValues: [that, musicLists],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWCreateMusicListTableConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_create_music_list_table",
        argNames: ["that", "musicLists"],
      );

  @override
  Future<void> sqlMusicFactoryWDelMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List ids,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_box_autoadd_music_list(musicList, serializer);
        sse_encode_list_prim_i_64_strict(ids, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWDelMusicConstMeta,
      argValues: [that, musicList, ids],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWDelMusicConstMeta => const TaskConstMeta(
        debugName: "SqlMusicFactoryW_del_music",
        argNames: ["that", "musicList", "ids"],
      );

  @override
  Future<void> sqlMusicFactoryWDelMusicListTable(
      {required SqlMusicFactoryW that,
      required List<MusicList> musicLists,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_list_music_list(musicLists, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWDelMusicListTableConstMeta,
      argValues: [that, musicLists],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWDelMusicListTableConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_del_music_list_table",
        argNames: ["that", "musicLists"],
      );

  @override
  Future<void> sqlMusicFactoryWInitCreateTable(
      {required SqlMusicFactoryW that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWInitCreateTableConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWInitCreateTableConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_init_create_table",
        argNames: ["that"],
      );

  @override
  Future<void> sqlMusicFactoryWInsertMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required List<MusicW> musics,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_box_autoadd_music_list(musicList, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            musics, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWInsertMusicConstMeta,
      argValues: [that, musicList, musics],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWInsertMusicConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_insert_music",
        argNames: ["that", "musicList", "musics"],
      );

  @override
  Future<List<MusicW>> sqlMusicFactoryWReadMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_box_autoadd_music_list(musicList, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWReadMusicConstMeta,
      argValues: [that, musicList],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWReadMusicConstMeta => const TaskConstMeta(
        debugName: "SqlMusicFactoryW_read_music",
        argNames: ["that", "musicList"],
      );

  @override
  Future<List<MusicW>> sqlMusicFactoryWReadMusicData(
      {required SqlMusicFactoryW that, required String source, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_String(source, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWReadMusicDataConstMeta,
      argValues: [that, source],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWReadMusicDataConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_read_music_data",
        argNames: ["that", "source"],
      );

  @override
  Future<List<MusicList>> sqlMusicFactoryWReadMusicLists(
      {required SqlMusicFactoryW that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_music_list,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWReadMusicListsConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWReadMusicListsConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_read_music_lists",
        argNames: ["that"],
      );

  @override
  Future<void> sqlMusicFactoryWReorderMusic(
      {required SqlMusicFactoryW that,
      required MusicList musicList,
      required Int64List newIndex,
      required List<MusicW> oldMusicsInOrder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            that, serializer);
        sse_encode_box_autoadd_music_list(musicList, serializer);
        sse_encode_list_prim_i_64_strict(newIndex, serializer);
        sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
            oldMusicsInOrder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSqlMusicFactoryWReorderMusicConstMeta,
      argValues: [that, musicList, newIndex, oldMusicsInOrder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSqlMusicFactoryWReorderMusicConstMeta =>
      const TaskConstMeta(
        debugName: "SqlMusicFactoryW_reorder_music",
        argNames: ["that", "musicList", "newIndex", "oldMusicsInOrder"],
      );

  @override
  Future<List<MusicW>> searchMusic(
      {required String content,
      required int page,
      required String source,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(content, serializer);
        sse_encode_u_32(page, serializer);
        sse_encode_String(source, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSearchMusicConstMeta,
      argValues: [content, page, source],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSearchMusicConstMeta => const TaskConstMeta(
        debugName: "search_music",
        argNames: ["content", "page", "source"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MusicW => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MusicW => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PoolAny => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PoolAny => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SqlMusicFactoryW => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SqlMusicFactoryW => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  MusicW
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MusicW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PoolAny
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PoolAny.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SqlMusicFactoryW
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SqlMusicFactoryW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  MusicW
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MusicW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SqlMusicFactoryW
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SqlMusicFactoryW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  MusicW
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MusicW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  PoolAny
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PoolAny.dcoDecode(raw as List<dynamic>);
  }

  @protected
  SqlMusicFactoryW
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SqlMusicFactoryW.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_config(raw);
  }

  @protected
  MusicList dco_decode_box_autoadd_music_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_music_list(raw);
  }

  @protected
  Quality dco_decode_box_autoadd_quality(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_quality(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Config dco_decode_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Config(
      userAgreement: dco_decode_bool(arr[0]),
      externApiPath: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<MusicW>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<MusicInfo> dco_decode_list_music_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_music_info).toList();
  }

  @protected
  List<MusicList> dco_decode_list_music_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_music_list).toList();
  }

  @protected
  Int64List dco_decode_list_prim_i_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Int64List.from(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Quality> dco_decode_list_quality(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_quality).toList();
  }

  @protected
  MusicInfo dco_decode_music_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return MusicInfo(
      id: dco_decode_i_64(arr[0]),
      source: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      artist: dco_decode_list_String(arr[3]),
      duration: dco_decode_opt_box_autoadd_u_32(arr[4]),
      album: dco_decode_opt_String(arr[5]),
      qualities: dco_decode_list_quality(arr[6]),
      defaultQuality: dco_decode_opt_box_autoadd_quality(arr[7]),
      artPic: dco_decode_opt_String(arr[8]),
      lyric: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  MusicList dco_decode_music_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return MusicList(
      name: dco_decode_String(arr[0]),
      artPic: dco_decode_String(arr[1]),
      desc: dco_decode_String(arr[2]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Quality? dco_decode_opt_box_autoadd_quality(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_quality(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  Quality dco_decode_quality(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Quality(
      short: dco_decode_String(arr[0]),
      level: dco_decode_opt_String(arr[1]),
      bitrate: dco_decode_opt_box_autoadd_u_32(arr[2]),
      format: dco_decode_opt_String(arr[3]),
      size: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  (
    SqlMusicFactoryW,
    Config
  ) dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_sql_music_factory_w_config(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          arr[0]),
      dco_decode_config(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  MusicW
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MusicW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PoolAny
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PoolAny.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SqlMusicFactoryW
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SqlMusicFactoryW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MusicW
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MusicW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SqlMusicFactoryW
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SqlMusicFactoryW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MusicW
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MusicW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PoolAny
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PoolAny.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SqlMusicFactoryW
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SqlMusicFactoryW.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_config(deserializer));
  }

  @protected
  MusicList sse_decode_box_autoadd_music_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_music_list(deserializer));
  }

  @protected
  Quality sse_decode_box_autoadd_quality(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_quality(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  Config sse_decode_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userAgreement = sse_decode_bool(deserializer);
    var var_externApiPath = sse_decode_opt_String(deserializer);
    return Config(
        userAgreement: var_userAgreement, externApiPath: var_externApiPath);
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  List<MusicW>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MusicW>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<MusicInfo> sse_decode_list_music_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MusicInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_music_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<MusicList> sse_decode_list_music_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MusicList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_music_list(deserializer));
    }
    return ans_;
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Quality> sse_decode_list_quality(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Quality>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_quality(deserializer));
    }
    return ans_;
  }

  @protected
  MusicInfo sse_decode_music_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_artist = sse_decode_list_String(deserializer);
    var var_duration = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_album = sse_decode_opt_String(deserializer);
    var var_qualities = sse_decode_list_quality(deserializer);
    var var_defaultQuality = sse_decode_opt_box_autoadd_quality(deserializer);
    var var_artPic = sse_decode_opt_String(deserializer);
    var var_lyric = sse_decode_opt_String(deserializer);
    return MusicInfo(
        id: var_id,
        source: var_source,
        name: var_name,
        artist: var_artist,
        duration: var_duration,
        album: var_album,
        qualities: var_qualities,
        defaultQuality: var_defaultQuality,
        artPic: var_artPic,
        lyric: var_lyric);
  }

  @protected
  MusicList sse_decode_music_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_artPic = sse_decode_String(deserializer);
    var var_desc = sse_decode_String(deserializer);
    return MusicList(name: var_name, artPic: var_artPic, desc: var_desc);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Quality? sse_decode_opt_box_autoadd_quality(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_quality(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Quality sse_decode_quality(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_short = sse_decode_String(deserializer);
    var var_level = sse_decode_opt_String(deserializer);
    var var_bitrate = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_format = sse_decode_opt_String(deserializer);
    var var_size = sse_decode_opt_String(deserializer);
    return Quality(
        short: var_short,
        level: var_level,
        bitrate: var_bitrate,
        format: var_format,
        size: var_size);
  }

  @protected
  (
    SqlMusicFactoryW,
    Config
  ) sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_sql_music_factory_w_config(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
            deserializer);
    var var_field1 = sse_decode_config(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          MusicW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          PoolAny self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SqlMusicFactoryW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          MusicW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SqlMusicFactoryW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          MusicW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockPoolAny(
          PoolAny self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
          SqlMusicFactoryW self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_music_list(
      MusicList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_music_list(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_quality(Quality self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quality(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.userAgreement, serializer);
    sse_encode_opt_String(self.externApiPath, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          List<MusicW> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMusicW(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_music_info(
      List<MusicInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_music_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_music_list(
      List<MusicList> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_music_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_quality(List<Quality> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_quality(item, serializer);
    }
  }

  @protected
  void sse_encode_music_info(MusicInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_list_String(self.artist, serializer);
    sse_encode_opt_box_autoadd_u_32(self.duration, serializer);
    sse_encode_opt_String(self.album, serializer);
    sse_encode_list_quality(self.qualities, serializer);
    sse_encode_opt_box_autoadd_quality(self.defaultQuality, serializer);
    sse_encode_opt_String(self.artPic, serializer);
    sse_encode_opt_String(self.lyric, serializer);
  }

  @protected
  void sse_encode_music_list(MusicList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.artPic, serializer);
    sse_encode_String(self.desc, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_quality(
      Quality? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_quality(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_quality(Quality self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.short, serializer);
    sse_encode_opt_String(self.level, serializer);
    sse_encode_opt_box_autoadd_u_32(self.bitrate, serializer);
    sse_encode_opt_String(self.format, serializer);
    sse_encode_opt_String(self.size, serializer);
  }

  @protected
  void
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generatedrust_async_rw_lock_sql_music_factory_w_config(
          (SqlMusicFactoryW, Config) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockSqlMusicFactoryW(
        self.$1, serializer);
    sse_encode_config(self.$2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
